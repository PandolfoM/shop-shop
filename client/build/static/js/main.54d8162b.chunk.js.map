{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/GlobalState.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","console","log","useStoreContext","useContext","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Cart","toggleCart","a","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","variables","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.54d8162b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","import {\r\n  UPDATE_PRODUCTS,\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n  ADD_TO_CART,\r\n  ADD_MULTIPLE_TO_CART,\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  CLEAR_CART,\r\n  TOGGLE_CART,\r\n} from \"./actions\";\r\nimport { useReducer } from \"react\";\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n    case UPDATE_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        products: [...action.products],\r\n      };\r\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\r\n    case UPDATE_CATEGORIES:\r\n      return {\r\n        ...state,\r\n        categories: [...action.categories],\r\n      };\r\n\r\n    case UPDATE_CURRENT_CATEGORY:\r\n      return {\r\n        ...state,\r\n        currentCategory: action.currentCategory,\r\n      };\r\n\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: [...state.cart, action.product],\r\n      };\r\n\r\n    case ADD_MULTIPLE_TO_CART:\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, ...action.products],\r\n      };\r\n\r\n    case REMOVE_FROM_CART:\r\n      let newState = state.cart.filter((product) => {\r\n        return product._id !== action._id;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        cartOpen: newState.length > 0,\r\n        cart: newState,\r\n      };\r\n\r\n    case UPDATE_CART_QUANTITY:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: state.cart.map((product) => {\r\n          if (action._id === product._id) {\r\n            product.purchaseQuantity = action.purchaseQuantity;\r\n          }\r\n          return product;\r\n        }),\r\n      };\r\n\r\n    case CLEAR_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: false,\r\n        cart: [],\r\n      };\r\n\r\n    case TOGGLE_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: !state.cartOpen,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function useProductReducer(initialState) {\r\n  return useReducer(reducer, initialState);\r\n}\r\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\n\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\r\nexport const CLEAR_CART = \"CLEAR_CART\";\r\nexport const TOGGLE_CART = \"TOGGLE_CART\";\r\n","import React, { createContext, useContext } from \"react\";\r\nimport { useProductReducer } from \"./reducers\";\r\n\r\nconst StoreContext = createContext();\r\nconst { Provider } = StoreContext;\r\n\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n  const [state, dispatch] = useProductReducer({\r\n    products: [],\r\n    cart: [],\r\n    cartOpen: false,\r\n    categories: [],\r\n    currentCategory: \"\",\r\n  });\r\n  console.log(state);\r\n  return <Provider value={[state, dispatch]} {...props} />;\r\n};\r\n\r\nconst useStoreContext = () => {\r\n  return useContext(StoreContext);\r\n};\r\n\r\nexport { StoreProvider, useStoreContext };\r\n","export function pluralize(name, count) {\r\n  if (count === 1) {\r\n    return name;\r\n  }\r\n  return name + \"s\";\r\n}\r\n\r\nexport function idbPromise(storeName, method, object) {\r\n  return new Promise((resolve, reject) => {\r\n    // open connection to the database `shop-shop` with the version of 1\r\n    const request = window.indexedDB.open(\"shop-shop\", 1);\r\n\r\n    // create variables to hold reference to the database, transaction (tx), and object store\r\n    let db, tx, store;\r\n\r\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\r\n    request.onupgradeneeded = function (e) {\r\n      const db = request.result;\r\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\r\n      db.createObjectStore(\"products\", { keyPath: \"_id\" });\r\n      db.createObjectStore(\"categories\", { keyPath: \"_id\" });\r\n      db.createObjectStore(\"cart\", { keyPath: \"_id\" });\r\n    };\r\n\r\n    // handle any errors with connecting\r\n    request.onerror = function (e) {\r\n      console.log(\"There was an error\");\r\n    };\r\n\r\n    // on database open success\r\n    request.onsuccess = function (e) {\r\n      // save a reference of the database to the `db` variable\r\n      db = request.result;\r\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\r\n      tx = db.transaction(storeName, \"readwrite\");\r\n      // save a reference to that object store\r\n      store = tx.objectStore(storeName);\r\n\r\n      // if there's any errors, let us know\r\n      db.onerror = function (e) {\r\n        console.log(\"error\", e);\r\n      };\r\n\r\n      switch (method) {\r\n        case \"put\":\r\n          store.put(object);\r\n          resolve(object);\r\n          break;\r\n        case \"get\":\r\n          const all = store.getAll();\r\n          all.onsuccess = function () {\r\n            resolve(all.result);\r\n          };\r\n          break;\r\n        case \"delete\":\r\n          store.delete(object._id);\r\n          break;\r\n        default:\r\n          console.log(\"No valid method\");\r\n          break;\r\n      }\r\n\r\n      // when the transaction is complete, close the connection\r\n      tx.oncomplete = function () {\r\n        db.close();\r\n      };\r\n    };\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nfunction ProductItem(item) {\r\n  const { image, name, _id, price, quantity } = item;\r\n  const [state, dispatch] = useStoreContext();\r\n  const { cart } = state;\r\n\r\n  const addToCart = () => {\r\n    // find the cart item with the matching id\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\r\n\r\n    // if there was a match, call UPDATE with a new purchase quantity\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: _id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n      });\r\n      idbPromise(\"cart\", \"put\", {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...item, purchaseQuantity: 1 },\r\n      });\r\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: 1 });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card px-1 py-1\">\r\n      <Link to={`/products/${_id}`}>\r\n        <img alt={name} src={`/images/${image}`} />\r\n        <p>{name}</p>\r\n      </Link>\r\n      <div>\r\n        <div>\r\n          {quantity} {pluralize(\"item\", quantity)} in stock\r\n        </div>\r\n        <span>${price}</span>\r\n      </div>\r\n      <button onClick={addToCart}>Add to cart</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductItem;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n  {\r\n    categories {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n  {\r\n    user {\r\n      firstName\r\n      lastName\r\n      orders {\r\n        _id\r\n        purchaseDate\r\n        products {\r\n          _id\r\n          name\r\n          description\r\n          price\r\n          quantity\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nimport ProductItem from \"../ProductItem\";\r\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\r\nimport spinner from \"../../assets/spinner.gif\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nfunction ProductList() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const { currentCategory } = state;\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  useEffect(() => {\r\n    // if there's data to be stored\r\n    if (data) {\r\n      // let's store it in the global state object\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products,\r\n      });\r\n\r\n      // but let's also take each product and save it to IndexedDB using the helper function\r\n      data.products.forEach((product) => {\r\n        idbPromise(\"products\", \"put\", product);\r\n      });\r\n    } else if (!loading) {\r\n      // since we're offline, get all of the data from the `products` store\r\n      idbPromise(\"products\", \"get\").then((products) => {\r\n        // use retrieved data to set global state for offline browsing\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products,\r\n        });\r\n      });\r\n    }\r\n  }, [data, loading, dispatch]);\r\n\r\n  function filterProducts() {\r\n    if (!currentCategory) {\r\n      return state.products;\r\n    }\r\n\r\n    return state.products.filter(\r\n      (product) => product.category._id === currentCategory\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      <h2>Our Products:</h2>\r\n      {state.products.length ? (\r\n        <div className=\"flex-row\">\r\n          {filterProducts().map((product) => (\r\n            <ProductItem\r\n              key={product._id}\r\n              _id={product._id}\r\n              image={product.image}\r\n              name={product.name}\r\n              price={product.price}\r\n              quantity={product.quantity}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any products yet!</h3>\r\n      )}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n","import React, { useEffect } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport {\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n} from \"../../utils/actions\";\r\n\r\nfunction CategoryMenu() {\r\n  const [state, dispatch] = useStoreContext();\r\n  const { categories } = state;\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n  useEffect(() => {\r\n    if (categoryData) {\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories,\r\n      });\r\n      categoryData.categories.forEach((category) => {\r\n        idbPromise(\"categories\", \"put\", category);\r\n      });\r\n    } else if (!loading) {\r\n      idbPromise(\"categories\", \"get\").then((categories) => {\r\n        dispatch({\r\n          type: UPDATE_CATEGORIES,\r\n          categories: categories,\r\n        });\r\n      });\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n  const handleClick = (id) => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currentCategory: id,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Choose a Category:</h2>\r\n      {categories.map((item) => (\r\n        <button\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}>\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;\r\n","import React from \"react\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nconst CartItem = ({ item }) => {\r\n  const [, dispatch] = useStoreContext();\r\n\r\n  const onChange = (e) => {\r\n    const value = e.target.value;\r\n\r\n    if (value === \"0\") {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id,\r\n      });\r\n      idbPromise(\"cart\", \"delete\", { ...item });\r\n    } else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value),\r\n      });\r\n      idbPromise(\"cart\", \"put\", { ...item, purchaseQuantity: parseInt(value) });\r\n    }\r\n  };\r\n\r\n  const removeFromCart = (item) => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id,\r\n    });\r\n    idbPromise(\"cart\", \"delete\", { ...item });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img src={`/images/${item.image}`} alt=\"\" />\r\n      </div>\r\n      <div>\r\n        <div>\r\n          {item.name}, ${item.price}\r\n        </div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1\"\r\n            value={item.purchaseQuantity}\r\n            onChange={onChange}\r\n          />\r\n          <span\r\n            role=\"img\"\r\n            aria-label=\"trash\"\r\n            onClick={() => removeFromCart(item)}>\r\n            🗑️\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartItem;\r\n","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useEffect } from \"react\";\r\nimport CartItem from \"../CartItem\";\r\nimport Auth from \"../../utils/auth\";\r\nimport \"./style.css\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nconst Cart = () => {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  useEffect(() => {\r\n    async function getCart() {\r\n      const cart = await idbPromise(\"cart\", \"get\");\r\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n    }\r\n\r\n    if (!state.cart.length) {\r\n      getCart();\r\n    }\r\n  }, [state.cart.length, dispatch]);\r\n\r\n  function toggleCart() {\r\n    dispatch({ type: TOGGLE_CART });\r\n  }\r\n\r\n  if (!state.cartOpen) {\r\n    return (\r\n      <div className=\"cart-closed\" onClick={toggleCart}>\r\n        <span role=\"img\" aria-label=\"trash\">\r\n          🛒\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function calculateTotal() {\r\n    let sum = 0;\r\n    state.cart.forEach((item) => {\r\n      sum += item.price * item.purchaseQuantity;\r\n    });\r\n\r\n    return sum.toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <div className=\"cart\">\r\n      <div className=\"close\" onClick={toggleCart}>\r\n        [close]\r\n      </div>\r\n      <h2>Shopping Cart</h2>\r\n      {state.cart.length ? (\r\n        <div>\r\n          {state.cart.map((item) => (\r\n            <CartItem key={item._id} item={item} />\r\n          ))}\r\n          <div className=\"flex-row space-between\">\r\n            <strong>Total: ${calculateTotal()}</strong>\r\n            {Auth.loggedIn() ? (\r\n              <button>Checkout</button>\r\n            ) : (\r\n              <span>(log in to check out)</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h3>\r\n          <span role=\"img\" aria-label=\"shocked\">\r\n            😱\r\n          </span>\r\n          You haven't added anything to your cart yet!\r\n        </h3>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import React, { useState } from \"react\";\r\nimport ProductList from \"../components/ProductList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\nimport Cart from \"../components/Cart\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <CategoryMenu />\r\n      <ProductList />\r\n      <Cart />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nimport Cart from \"../components/Cart\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport {\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  ADD_TO_CART,\r\n  UPDATE_PRODUCTS,\r\n} from \"../utils/actions\";\r\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\r\nimport { idbPromise } from \"../utils/helpers\";\r\nimport spinner from \"../assets/spinner.gif\";\r\n\r\nfunction Detail() {\r\n  const [state, dispatch] = useStoreContext();\r\n  const { id } = useParams();\r\n\r\n  const [currentProduct, setCurrentProduct] = useState({});\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  const { products, cart } = state;\r\n\r\n  useEffect(() => {\r\n    // already in global store\r\n    if (products.length) {\r\n      setCurrentProduct(products.find((product) => product._id === id));\r\n    }\r\n    // retrieved from server\r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products,\r\n      });\r\n\r\n      data.products.forEach((product) => {\r\n        idbPromise(\"products\", \"put\", product);\r\n      });\r\n    }\r\n    // get cache from idb\r\n    else if (!loading) {\r\n      idbPromise(\"products\", \"get\").then((indexedProducts) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: indexedProducts,\r\n        });\r\n      });\r\n    }\r\n  }, [products, data, loading, dispatch, id]);\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n      });\r\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\r\n      idbPromise(\"cart\", \"put\", {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...currentProduct, purchaseQuantity: 1 },\r\n      });\r\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\r\n      idbPromise(\"cart\", \"put\", { ...currentProduct, purchaseQuantity: 1 });\r\n    }\r\n  };\r\n\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: currentProduct._id,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {currentProduct && cart ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">← Back to Products</Link>\r\n\r\n          <h2>{currentProduct.name}</h2>\r\n\r\n          <p>{currentProduct.description}</p>\r\n\r\n          <p>\r\n            <strong>Price:</strong>${currentProduct.price}{\" \"}\r\n            <button onClick={addToCart}>Add to Cart</button>\r\n            <button\r\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\r\n              onClick={removeFromCart}>\r\n              Remove from Cart\r\n            </button>\r\n          </p>\r\n\r\n          <img\r\n            src={`/images/${currentProduct.image}`}\r\n            alt={currentProduct.name}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n      <Cart />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nconst NoMatch = () => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>404 Page Not Found</h1>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n            🙄\r\n          </span>\r\n        </h1>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_ORDER = gql`\r\n  mutation addOrder($products: [ID]!) {\r\n    addOrder(products: $products) {\r\n      purchaseDate\r\n      products {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        quantity\r\n        category {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser(\r\n    $firstName: String!\r\n    $lastName: String!\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    addUser(\r\n      firstName: $firstName\r\n      lastName: $lastName\r\n      email: $email\r\n      password: $password\r\n    ) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport { LOGIN } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nfunction Login(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [login, { error }] = useMutation(LOGIN);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const mutationResponse = await login({\r\n        variables: { email: formState.email, password: formState.password },\r\n      });\r\n      const token = mutationResponse.data.login.token;\r\n      Auth.login(token);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/signup\">← Go to Signup</Link>\r\n\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {error ? (\r\n          <div>\r\n            <p className=\"error-text\">The provided credentials are incorrect</p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport Auth from '../utils/auth';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nfunction Signup(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const mutationResponse = await addUser({\r\n      variables: {\r\n        email: formState.email,\r\n        password: formState.password,\r\n        firstName: formState.firstName,\r\n        lastName: formState.lastName,\r\n      },\r\n    });\r\n    const token = mutationResponse.data.addUser.token;\r\n    Auth.login(token);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/login\">← Go to Login</Link>\r\n\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            placeholder=\"First\"\r\n            name=\"firstName\"\r\n            type=\"firstName\"\r\n            id=\"firstName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            placeholder=\"Last\"\r\n            name=\"lastName\"\r\n            type=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n  function showNavigation() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/orderHistory\">Order History</Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n            <a href=\"/\" onClick={() => Auth.logout()}>\r\n              Logout\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/signup\">Signup</Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/login\">Login</Link>\r\n          </li>\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"flex-row px-1\">\r\n      <h1>\r\n        <Link to=\"/\">\r\n          <span role=\"img\" aria-label=\"shopping bag\">\r\n            🛍️\r\n          </span>\r\n          -Shop-Shop\r\n        </Link>\r\n      </h1>\r\n\r\n      <nav>{showNavigation()}</nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_USER } from '../utils/queries';\r\n\r\nfunction OrderHistory() {\r\n  const { data } = useQuery(QUERY_USER);\r\n  let user;\r\n\r\n  if (data) {\r\n    user = data.user;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-1\">\r\n        <Link to=\"/\">← Back to Products</Link>\r\n\r\n        {user ? (\r\n          <>\r\n            <h2>\r\n              Order History for {user.firstName} {user.lastName}\r\n            </h2>\r\n            {user.orders.map((order) => (\r\n              <div key={order._id} className=\"my-2\">\r\n                <h3>\r\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\r\n                </h3>\r\n                <div className=\"flex-row\">\r\n                  {order.products.map(({ _id, image, name, price }, index) => (\r\n                    <div key={index} className=\"card px-1 py-1\">\r\n                      <Link to={`/products/${_id}`}>\r\n                        <img alt={name} src={`/images/${image}`} />\r\n                        <p>{name}</p>\r\n                      </Link>\r\n                      <div>\r\n                        <span>${price}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OrderHistory;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from \"@apollo/client\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\nimport { StoreProvider } from \"./utils/GlobalState\";\r\n\r\nimport Home from \"./pages/Home\";\r\nimport Detail from \"./pages/Detail\";\r\nimport NoMatch from \"./pages/NoMatch\";\r\nimport Login from \"./pages/Login\";\r\nimport Signup from \"./pages/Signup\";\r\nimport Nav from \"./components/Nav\";\r\nimport OrderHistory from \"./pages/OrderHistory\";\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"/graphql\",\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem(\"id_token\");\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          <StoreProvider>\r\n            <Nav />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route exact path=\"/login\" component={Login} />\r\n              <Route exact path=\"/signup\" component={Signup} />\r\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\r\n              <Route exact path=\"/products/:id\" component={Detail} />\r\n              <Route component={NoMatch} />\r\n            </Switch>\r\n          </StoreProvider>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (\r\n    process.env.NODE_ENV === 'production' &&\r\n    'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}